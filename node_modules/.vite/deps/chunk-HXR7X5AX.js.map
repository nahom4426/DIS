{
  "version": 3,
  "sources": ["../../@customizer/modal-x/store/modal.js"],
  "sourcesContent": ["import {\n  reactive,\n  shallowRef,\n  watch,\n  defineAsyncComponent,\n  getCurrentInstance,\n  nextTick,\n  h,\n  ref,\n} from \"vue\";\nimport ModalParent from '../ModalParent.vue'\nimport { defineStore } from \"pinia\";\nimport Spinner from \"../Spinner.vue\";\n\nexport const useModal = defineStore(\"modal\", () => {\n  let modals = reactive([]);\n  const fetchedModals = shallowRef([]);\n  const spinners = shallowRef([]);\n  const globalSpinner = shallowRef();\n  // this will be set by ModalParent Since i can get access of the opened modal name to be set for the options\n  const modalName = ref('') \n  const options = ref([]);\n \n  function setOptions(opts = {\n    closeonEsc: true,\n    closeOnOverlayClick: true\n  }) {\n    if(!modalName.value) return\n    options.value[modalName.value] = opts\n  }\n\n  function openModal(modalToOpen, data, cb) {\n    modals.forEach((modal) => {\n      modal.active = false;\n    });\n\n    try {\n      data = JSON.parse(JSON.stringify(data));\n      modals.unshift({ modalToOpen, data, cb, active: true });\n    } catch (err) {\n      modals.unshift({ modalToOpen, data, cb, active: true });\n    }\n  }\n\n  function closeModal(response, sendResponse = true) {\n    let modal = modals.shift();\n    modals.length && (modals[0].active = true);\n\n    if (![undefined, null].includes(response)) modal.cb && modal.cb(response);\n  }\n\n  function getModal(name) {\n    return modals.find((modal) => modal.modalToOpen == name);\n  }\n\n  async function loadModal(modal, name, render = true) {\n    if (\n      fetchedModals.value.find((mod) =>\n        [name, modal.__name?.match(/.*\\/(.+)\\.mdl\\.vue$/)?.[1]].includes(mod.id)\n      )\n    )\n      return;\n\n    let com;\n    if (render) {\n      com = await modal.__asyncLoader();\n    } else {\n      com = modal;\n    }\n    name ||= modal.__name?.match(/.*\\/(.+)\\.mdl\\.vue$/)?.[1]\n    fetchedModals.value = [\n      {\n        id: name || \"\",\n        modal: h(ModalParent, {\n          name\n        }, () => {\n          return h(com, {\n            data: getModal(name)?.data\n          })\n        }),\n      },\n      ...fetchedModals.value,\n    ];\n  }\n\n  async function loadSpinners(modal, name, group) {\n    if (\n      spinners.value.find((mod) => {\n        return [name, modal.__name?.match(/.*\\/(.+)\\.s\\.vue$/)?.[1]?.split('.')?.[0]].includes(\n          mod.id\n        );\n      })\n    )\n      return;\n    const com = await modal.__asyncLoader();\n    spinners.value = [\n      {\n        id: name || modal.__name?.match(/.*\\/(.+)\\.s\\.vue$/)?.[1] || \"\",\n        modal: com,\n        group\n      },\n      ...spinners.value,\n    ];\n  }\n\n  async function loadGlobalSpinner(modal, name) {\n    const com = await modal.__asyncLoader();\n    globalSpinner.value = {\n      id: name || modal.__name?.match(/.*\\/(.+)\\.g\\.vue$/)?.[1] || \"\",\n      modal: com,\n    };\n  }\n\n  function fetchModal(name) {\n    if (\n      fetchedModals.value.find(\n        (modal) => modal.id == `${name}.mdl` || modal.id == name\n      )\n    )\n      return;\n\n    const asyncModules = import.meta.glob([\n      `/**/*(.)*.amdl.vue`,\n      \"!./node_modules\",\n    ]);\n    let mods = { ...asyncModules };\n\n    let group\n    const modalPath = Object.keys(mods).find(\n      (module) => {\n        const file = module.match(/.*\\/(.+)\\.amdl\\.vue$/)?.[1].split(\".\")\n        const fileName = file?.[0] \n        if(fileName == name) {\n          group = file?.[1]\n        }\n        return fileName == name\n      }\n    );\n\n    if (!modalPath)\n      return console.log(\n        `%cno modal found with name [${name}]`,\n        \"font-size: 14px; color: red;\"\n      );\n\n    const spinnerModal = spinners.value.find((m) => m.id == name || (group && m?.group == group))?.modal;\n    let modal = defineAsyncComponent({\n      loader: () => mods[modalPath](),\n      loadingComponent: spinnerModal || globalSpinner.value?.modal || Spinner,\n      delay: 0,\n    });\n\n    loadModal(modal, name, false);\n  }\n\n  watch(modals, (modals) => {\n    if (modals?.[0]) fetchModal(modals?.[0]?.modalToOpen);\n  });\n\n  //watch(options, () => {\n  //  console.log(options.value)\n  //}, {immediate: true, deep: true})\n\n  return {\n    modals,\n    loadSpinners,\n    spinners,\n    fetchedModals,\n    openModal,\n    closeModal,\n    getModal,\n    loadModal,\n    loadGlobalSpinner,\n    setOptions,\n    options,\n    modalName\n  };\n});\n"],
  "mappings": ";;;;;;;;;;;;;AAUA,OAAO,iBAAiB;AAExB,OAAO,aAAa;AAEb,IAAM,WAAW,YAAY,SAAS,MAAM;AACjD,MAAI,SAAS,SAAS,CAAC,CAAC;AACxB,QAAM,gBAAgB,WAAW,CAAC,CAAC;AACnC,QAAM,WAAW,WAAW,CAAC,CAAC;AAC9B,QAAM,gBAAgB,WAAW;AAEjC,QAAM,YAAY,IAAI,EAAE;AACxB,QAAM,UAAU,IAAI,CAAC,CAAC;AAEtB,WAAS,WAAW,OAAO;AAAA,IACzB,YAAY;AAAA,IACZ,qBAAqB;AAAA,EACvB,GAAG;AACD,QAAG,CAAC,UAAU,MAAO;AACrB,YAAQ,MAAM,UAAU,KAAK,IAAI;AAAA,EACnC;AAEA,WAAS,UAAU,aAAa,MAAM,IAAI;AACxC,WAAO,QAAQ,CAAC,UAAU;AACxB,YAAM,SAAS;AAAA,IACjB,CAAC;AAED,QAAI;AACF,aAAO,KAAK,MAAM,KAAK,UAAU,IAAI,CAAC;AACtC,aAAO,QAAQ,EAAE,aAAa,MAAM,IAAI,QAAQ,KAAK,CAAC;AAAA,IACxD,SAAS,KAAK;AACZ,aAAO,QAAQ,EAAE,aAAa,MAAM,IAAI,QAAQ,KAAK,CAAC;AAAA,IACxD;AAAA,EACF;AAEA,WAAS,WAAW,UAAU,eAAe,MAAM;AACjD,QAAI,QAAQ,OAAO,MAAM;AACzB,WAAO,WAAW,OAAO,CAAC,EAAE,SAAS;AAErC,QAAI,CAAC,CAAC,QAAW,IAAI,EAAE,SAAS,QAAQ,EAAG,OAAM,MAAM,MAAM,GAAG,QAAQ;AAAA,EAC1E;AAEA,WAAS,SAAS,MAAM;AACtB,WAAO,OAAO,KAAK,CAAC,UAAU,MAAM,eAAe,IAAI;AAAA,EACzD;AAEA,iBAAe,UAAU,OAAO,MAAM,SAAS,MAAM;AAvDvD;AAwDI,QACE,cAAc,MAAM;AAAA,MAAK,CAAC,QAAK;AAzDrC,YAAAA,KAAAC;AA0DQ,gBAAC,OAAMA,OAAAD,MAAA,MAAM,WAAN,gBAAAA,IAAc,MAAM,2BAApB,gBAAAC,IAA6C,EAAE,EAAE,SAAS,IAAI,EAAE;AAAA;AAAA,IACzE;AAEA;AAEF,QAAI;AACJ,QAAI,QAAQ;AACV,YAAM,MAAM,MAAM,cAAc;AAAA,IAClC,OAAO;AACL,YAAM;AAAA,IACR;AACA,qBAAS,iBAAM,WAAN,mBAAc,MAAM,2BAApB,mBAA6C;AACtD,kBAAc,QAAQ;AAAA,MACpB;AAAA,QACE,IAAI,QAAQ;AAAA,QACZ,OAAO,EAAE,aAAa;AAAA,UACpB;AAAA,QACF,GAAG,MAAM;AA3EjB,cAAAD;AA4EU,iBAAO,EAAE,KAAK;AAAA,YACZ,OAAMA,MAAA,SAAS,IAAI,MAAb,gBAAAA,IAAgB;AAAA,UACxB,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,MACA,GAAG,cAAc;AAAA,IACnB;AAAA,EACF;AAEA,iBAAe,aAAa,OAAO,MAAM,OAAO;AArFlD;AAsFI,QACE,SAAS,MAAM,KAAK,CAAC,QAAQ;AAvFnC,UAAAA,KAAAC,KAAA;AAwFQ,aAAO,CAAC,OAAM,YAAAA,OAAAD,MAAA,MAAM,WAAN,gBAAAA,IAAc,MAAM,yBAApB,gBAAAC,IAA2C,OAA3C,mBAA+C,MAAM,SAArD,mBAA4D,EAAE,EAAE;AAAA,QAC5E,IAAI;AAAA,MACN;AAAA,IACF,CAAC;AAED;AACF,UAAM,MAAM,MAAM,MAAM,cAAc;AACtC,aAAS,QAAQ;AAAA,MACf;AAAA,QACE,IAAI,UAAQ,iBAAM,WAAN,mBAAc,MAAM,yBAApB,mBAA2C,OAAM;AAAA,QAC7D,OAAO;AAAA,QACP;AAAA,MACF;AAAA,MACA,GAAG,SAAS;AAAA,IACd;AAAA,EACF;AAEA,iBAAe,kBAAkB,OAAO,MAAM;AAzGhD;AA0GI,UAAM,MAAM,MAAM,MAAM,cAAc;AACtC,kBAAc,QAAQ;AAAA,MACpB,IAAI,UAAQ,iBAAM,WAAN,mBAAc,MAAM,yBAApB,mBAA2C,OAAM;AAAA,MAC7D,OAAO;AAAA,IACT;AAAA,EACF;AAEA,WAAS,WAAW,MAAM;AAjH5B;AAkHI,QACE,cAAc,MAAM;AAAA,MAClB,CAACC,WAAUA,OAAM,MAAM,GAAG,IAAI,UAAUA,OAAM,MAAM;AAAA,IACtD;AAEA;AAEF,UAAM,eAAe,YAAY,KAAK;AAAA,MACpC;AAAA,MACA;AAAA,IACF,CAAC;AACD,QAAI,OAAO,EAAE,GAAG,aAAa;AAE7B,QAAI;AACJ,UAAM,YAAY,OAAO,KAAK,IAAI,EAAE;AAAA,MAClC,CAAC,WAAW;AAjIlB,YAAAF;AAkIQ,cAAM,QAAOA,MAAA,OAAO,MAAM,sBAAsB,MAAnC,gBAAAA,IAAuC,GAAG,MAAM;AAC7D,cAAM,WAAW,6BAAO;AACxB,YAAG,YAAY,MAAM;AACnB,kBAAQ,6BAAO;AAAA,QACjB;AACA,eAAO,YAAY;AAAA,MACrB;AAAA,IACF;AAEA,QAAI,CAAC;AACH,aAAO,QAAQ;AAAA,QACb,+BAA+B,IAAI;AAAA,QACnC;AAAA,MACF;AAEF,UAAM,gBAAe,cAAS,MAAM,KAAK,CAAC,MAAM,EAAE,MAAM,QAAS,UAAS,uBAAG,UAAS,KAAM,MAAvE,mBAA0E;AAC/F,QAAI,QAAQ,qBAAqB;AAAA,MAC/B,QAAQ,MAAM,KAAK,SAAS,EAAE;AAAA,MAC9B,kBAAkB,kBAAgB,mBAAc,UAAd,mBAAqB,UAAS;AAAA,MAChE,OAAO;AAAA,IACT,CAAC;AAED,cAAU,OAAO,MAAM,KAAK;AAAA,EAC9B;AAEA,QAAM,QAAQ,CAACG,YAAW;AA3J5B;AA4JI,QAAIA,WAAA,gBAAAA,QAAS,GAAI,aAAW,KAAAA,WAAA,gBAAAA,QAAS,OAAT,mBAAa,WAAW;AAAA,EACtD,CAAC;AAMD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF,CAAC;",
  "names": ["_a", "_b", "modal", "modals"]
}
