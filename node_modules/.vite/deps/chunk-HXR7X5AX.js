import {
  defineStore
} from "./chunk-HP6C2YHZ.js";
import {
  defineAsyncComponent,
  h,
  reactive,
  ref,
  shallowRef,
  watch
} from "./chunk-VZXQDS5F.js";

// node_modules/@customizer/modal-x/store/modal.js
import ModalParent from "C:/Users/herme/OneDrive/Documents/DIS-1/node_modules/@customizer/modal-x/ModalParent.vue";
import Spinner from "C:/Users/herme/OneDrive/Documents/DIS-1/node_modules/@customizer/modal-x/Spinner.vue";
var useModal = defineStore("modal", () => {
  let modals = reactive([]);
  const fetchedModals = shallowRef([]);
  const spinners = shallowRef([]);
  const globalSpinner = shallowRef();
  const modalName = ref("");
  const options = ref([]);
  function setOptions(opts = {
    closeonEsc: true,
    closeOnOverlayClick: true
  }) {
    if (!modalName.value) return;
    options.value[modalName.value] = opts;
  }
  function openModal(modalToOpen, data, cb) {
    modals.forEach((modal) => {
      modal.active = false;
    });
    try {
      data = JSON.parse(JSON.stringify(data));
      modals.unshift({ modalToOpen, data, cb, active: true });
    } catch (err) {
      modals.unshift({ modalToOpen, data, cb, active: true });
    }
  }
  function closeModal(response, sendResponse = true) {
    let modal = modals.shift();
    modals.length && (modals[0].active = true);
    if (![void 0, null].includes(response)) modal.cb && modal.cb(response);
  }
  function getModal(name) {
    return modals.find((modal) => modal.modalToOpen == name);
  }
  async function loadModal(modal, name, render = true) {
    var _a, _b;
    if (fetchedModals.value.find(
      (mod) => {
        var _a2, _b2;
        return [name, (_b2 = (_a2 = modal.__name) == null ? void 0 : _a2.match(/.*\/(.+)\.mdl\.vue$/)) == null ? void 0 : _b2[1]].includes(mod.id);
      }
    ))
      return;
    let com;
    if (render) {
      com = await modal.__asyncLoader();
    } else {
      com = modal;
    }
    name || (name = (_b = (_a = modal.__name) == null ? void 0 : _a.match(/.*\/(.+)\.mdl\.vue$/)) == null ? void 0 : _b[1]);
    fetchedModals.value = [
      {
        id: name || "",
        modal: h(ModalParent, {
          name
        }, () => {
          var _a2;
          return h(com, {
            data: (_a2 = getModal(name)) == null ? void 0 : _a2.data
          });
        })
      },
      ...fetchedModals.value
    ];
  }
  async function loadSpinners(modal, name, group) {
    var _a, _b;
    if (spinners.value.find((mod) => {
      var _a2, _b2, _c, _d;
      return [name, (_d = (_c = (_b2 = (_a2 = modal.__name) == null ? void 0 : _a2.match(/.*\/(.+)\.s\.vue$/)) == null ? void 0 : _b2[1]) == null ? void 0 : _c.split(".")) == null ? void 0 : _d[0]].includes(
        mod.id
      );
    }))
      return;
    const com = await modal.__asyncLoader();
    spinners.value = [
      {
        id: name || ((_b = (_a = modal.__name) == null ? void 0 : _a.match(/.*\/(.+)\.s\.vue$/)) == null ? void 0 : _b[1]) || "",
        modal: com,
        group
      },
      ...spinners.value
    ];
  }
  async function loadGlobalSpinner(modal, name) {
    var _a, _b;
    const com = await modal.__asyncLoader();
    globalSpinner.value = {
      id: name || ((_b = (_a = modal.__name) == null ? void 0 : _a.match(/.*\/(.+)\.g\.vue$/)) == null ? void 0 : _b[1]) || "",
      modal: com
    };
  }
  function fetchModal(name) {
    var _a, _b;
    if (fetchedModals.value.find(
      (modal2) => modal2.id == `${name}.mdl` || modal2.id == name
    ))
      return;
    const asyncModules = import.meta.glob([
      `/**/*(.)*.amdl.vue`,
      "!./node_modules"
    ]);
    let mods = { ...asyncModules };
    let group;
    const modalPath = Object.keys(mods).find(
      (module) => {
        var _a2;
        const file = (_a2 = module.match(/.*\/(.+)\.amdl\.vue$/)) == null ? void 0 : _a2[1].split(".");
        const fileName = file == null ? void 0 : file[0];
        if (fileName == name) {
          group = file == null ? void 0 : file[1];
        }
        return fileName == name;
      }
    );
    if (!modalPath)
      return console.log(
        `%cno modal found with name [${name}]`,
        "font-size: 14px; color: red;"
      );
    const spinnerModal = (_a = spinners.value.find((m) => m.id == name || group && (m == null ? void 0 : m.group) == group)) == null ? void 0 : _a.modal;
    let modal = defineAsyncComponent({
      loader: () => mods[modalPath](),
      loadingComponent: spinnerModal || ((_b = globalSpinner.value) == null ? void 0 : _b.modal) || Spinner,
      delay: 0
    });
    loadModal(modal, name, false);
  }
  watch(modals, (modals2) => {
    var _a;
    if (modals2 == null ? void 0 : modals2[0]) fetchModal((_a = modals2 == null ? void 0 : modals2[0]) == null ? void 0 : _a.modalToOpen);
  });
  return {
    modals,
    loadSpinners,
    spinners,
    fetchedModals,
    openModal,
    closeModal,
    getModal,
    loadModal,
    loadGlobalSpinner,
    setOptions,
    options,
    modalName
  };
});

export {
  useModal
};
//# sourceMappingURL=chunk-HXR7X5AX.js.map
