import{Z as F,h as w,r as _,$ as I,u as c,T as a,aw as E,ax as R,ay as q,a3 as M,az as S,m as A,o as D,w as y,d as v,N as C,a as U,b as N,M as x}from"./index-BA4ml571.js";import{I as $}from"./submitClaimsForm-orHStDkl.js";const j=F({__name:"submitClaimsFormDataProvider",props:{auto:{type:Boolean,default:!0}},setup(P,{expose:p}){const i=w(),s=w(),h=w(),g=_(null);function e(n){const t=n.get("insured");if(!t){const r="Missing insured data";return a(!1,r),Promise.reject(new Error(r))}try{const r=JSON.parse(t),m=["payerUuid","firstName","fatherName","grandFatherName","gender","position","birthDate","idNumber","phone"].filter(f=>{const b=r[f];return b==null||b===""});if(m.length>0){const f=`Missing required Insured fields: ${m.join(", ")}`;return console.error("Validation failed:",f),a(!1,f),Promise.reject(new Error(f))}return d(n)}catch(r){return a(!1,"Invalid insured data format"),Promise.reject(r)}}function d(n){return new Promise((t,r)=>{i.send(()=>E(n),o=>{if(o.success)a(!0,"Insured member registered successfully"),t(o);else{const m=o.error||"Failed to register insured member";a(!1,m),r(new Error(m))}})})}function l(n){return new Promise((t,r)=>{s.send(()=>R(n),o=>{o.success?(a(!0,"Insured members imported successfully"),t(o)):(a(!1,o.error||"Failed to import insured members"),r(new Error(o.error||"Failed to import insured members")))})})}function u(){h.send(()=>q(),n=>{try{const t=window.URL.createObjectURL(new Blob([n])),r=document.createElement("a");r.href=t,r.setAttribute("download","insured_members_template.xlsx"),document.body.appendChild(r),r.click(),document.body.removeChild(r)}catch(t){console.error("Error downloading template:",t),a(!1,"Failed to download template")}})}return p({register:e,importFile:l,downloadTemplate:u,fileInputRef:g,pending:i.pending}),(n,t)=>I(n.$slots,"default",{register:e,registerPending:c(i).pending.value,registerError:c(i).error.value,importFile:l,importPending:c(s).pending.value,importError:c(s).error.value,downloadTemplate:u,downloadPending:c(h).pending.value,fileInputRef:g.value})}}),k={class:"bg-white rounded-lg"},J=F({__name:"AddSubmitClaims.mdl",setup(P){const p=_(!1),i=M(),s=_(),h=S();async function g(e){try{p.value=!0;const l=["payerUuid","firstName","fatherName","grandFatherName","gender","position","birthDate","idNumber","phone"].filter(r=>!e[r]);if(l.length>0)throw new Error(`Missing required fields: ${l.join(", ")}`);const u=new FormData;e.employeePhoto&&u.append("photo",e.employeePhoto);const n={email:e.email||"",firstName:e.firstName,payerUuid:e.payerUuid,fatherName:e.fatherName,grandFatherName:e.grandFatherName,birthDate:e.birthDate,phone:e.phone,address:e.address||"",state:e.state||"Addis Ababa",country:e.country||"Ethiopia",idNumber:e.idNumber,position:e.position,gender:e.gender,status:e.status||"ACTIVE"};u.append("insured",JSON.stringify(n));const t=await s.value.register(u);if(t.success){const r={...t.data,photoUrl:t.data.photoUrl||(t.data.photoPath?`http://localhost:8080/api/insured/photo/${t.data.photoPath}`:null)};h.add(r),a(!0,"Success","Employee added successfully"),s.value.props&&s.value.props.data&&s.value.props.data.onAdded&&typeof s.value.props.data.onAdded=="function"&&s.value.props.data.onAdded(r),N(),i.push("/insured_list")}else throw new Error(t.error||"Registration failed")}catch(d){console.error("Submission error:",d),a(!1,"Failed to submit form",d.message)}finally{p.value=!1}}return(e,d)=>(D(),A(x,null,{default:y(()=>[v(C,{class:"",size:"lg",title:"Add Employee",subtitle:"To add a new employee, please fill out the information in the fields below."},{default:y(()=>[U("div",k,[v(j,{ref_key:"formDataProvider",ref:s},{default:y(({pending:l})=>[v($,{pending:p.value,onSubmit:g,onCancel:()=>c(N)()},null,8,["pending","onCancel"])]),_:1},512)])]),_:1})]),_:1}))}});export{J as default};
